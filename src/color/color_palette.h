/**
 * @file color_palette.h
 * @author xiansnn (xiansnn@hotmail.com)
 * @brief
 * @version 0.1
 * @date 2025-04-03
 *
 * @copyright Copyright (c) 2025
 *
 */

#pragma once

#include "sw/display_device/display_device.h"

// #include <map>
// typedef std::map<ColorIndex, std::tuple<uint8_t, uint8_t, uint8_t>> color_palette_t;
// color_palette_t color_palette{
//     {ColorIndex::BLACK, {0x00, 0x00, 0x00}},
//     {ColorIndex::WHITE, {0xFF, 0xFF, 0xFF}},
//     {ColorIndex::RED, {0xFF, 0x00, 0x00}},
//     {ColorIndex::LIME, {0x00, 0xFF, 0x00}},
//     {ColorIndex::BLUE, {0x00, 0x00, 0xFF}},
//     {ColorIndex::YELLOW, {0xFF, 0xFF, 0x00}},
//     {ColorIndex::CYAN, {0x00, 0xFF, 0xFF}},
//     {ColorIndex::MAGENTA, {0xFF, 0x00, 0xFF}},
//     {ColorIndex::SILVER, {0xC0, 0xC0, 0xC0}},
//     {ColorIndex::GRAY, {0x80, 0x80, 0x80}},
//     {ColorIndex::MAROON, {0x80, 0x00, 0x00}},
//     {ColorIndex::OLIVE, {0x80, 0x80, 0x00}},
//     {ColorIndex::GREEN, {0x00, 0x80, 0x00}},
//     {ColorIndex::PURPLE, {0x80, 0x00, 0x80}},
//     {ColorIndex::TEAL, {0x00, 0x80, 0x80}},
//     {ColorIndex::NAVY, {0x00, 0x00, 0x80}},
//     {ColorIndex::ORANGE, {0xFF, 0xA5, 0x00}},
//     {ColorIndex::GOLD, {0xFF, 0xD7, 0x00}},
//     {ColorIndex::FOREST, {0x22, 0x8B, 0x22}}};

uint16_t color_palette[32] = {
    0x0000, // ColorIndex::BLACK
    (((0xFF & 0xF8) << 8) | ((0xFF & 0xFC) << 3) | (0xFF >> 3)), //ColorIndex::WHITE
    (((0xFF & 0xF8) << 8) | ((0x00 & 0xFC) << 3) | (0x00 >> 3)), //ColorIndex::RED
    (((0x00 & 0xF8) << 8) | ((0xFF & 0xFC) << 3) | (0x00 >> 3)), //ColorIndex::LIME
    (((0x00 & 0xF8) << 8) | ((0x00 & 0xFC) << 3) | (0xFF >> 3)), //ColorIndex::BLUE
    (((0xFF & 0xF8) << 8) | ((0xFF & 0xFC) << 3) | (0x00 >> 3)), //ColorIndex::YELLOW
    (((0x00 & 0xF8) << 8) | ((0xFF & 0xFC) << 3) | (0xFF >> 3)), //ColorIndex::CYAN
    (((0xFF & 0xF8) << 8) | ((0x00 & 0xFC) << 3) | (0xFF >> 3)), //ColorIndex::MAGENTA
    (((0xC0 & 0xF8) << 8) | ((0xC0 & 0xFC) << 3) | (0xC0 >> 3)), //ColorIndex::SILVER
    (((0x80 & 0xF8) << 8) | ((0x80 & 0xFC) << 3) | (0x80 >> 3)), //ColorIndex::GRAY
    (((0x80 & 0xF8) << 8) | ((0x00 & 0xFC) << 3) | (0x00 >> 3)), //ColorIndex::MAROON
    (((0x80 & 0xF8) << 8) | ((0x80 & 0xFC) << 3) | (0x00 >> 3)), //ColorIndex::OLIVE
    (((0x00 & 0xF8) << 8) | ((0x80 & 0xFC) << 3) | (0x00 >> 3)), //ColorIndex::GREEN
    (((0x80 & 0xF8) << 8) | ((0x00 & 0xFC) << 3) | (0x80 >> 3)), //ColorIndex::PURPLE
    (((0x00 & 0xF8) << 8) | ((0x80 & 0xFC) << 3) | (0x80 >> 3)), //ColorIndex::TEAL
    (((0x00 & 0xF8) << 8) | ((0x00 & 0xFC) << 3) | (0x80 >> 3)), //ColorIndex::NAVY
    (((0xFF & 0xF8) << 8) | ((0xA5 & 0xFC) << 3) | (0x00 >> 3)), //ColorIndex::ORANGE
    (((0xFF & 0xF8) << 8) | ((0xD7 & 0xFC) << 3) | (0x00 >> 3)), //ColorIndex::GOLD
    (((0x22 & 0xF8) << 8) | ((0x8B & 0xFC) << 3) | (0x22 >> 3))  //ColorIndex::FOREST
};

