@startuml draw_with_blinking
title method : draw with blinking
skinparam style strictuml
skinparam SequenceMessageAlignment center

[-> my_widget : draw()
    
loop for each widget
group get value of interest from model
my_widget->my_widget ++: get_value_of_interest()
actual_displayed_model <- my_widget ++: read values and process them
rnote over my_widget : specific to the implemented widget and the attached model
actual_displayed_model -> my_widget --: values
deactivate my_widget
end
group check blinking
my_widget -> my_widget ++ : compute_blinking_phase()
my_widget -> system_clock ++ : get system time
my_widget <- system_clock --: blink_phase_changed = true | false
deactivate my_widget
end

alt blink_phase_changed = true
my_widget -> my_widget --++: make the widget blink
my_widget -> my_widget --++: clear blink_phase_changed
return
deactivate my_widget
    


else blink_phase_changed = false
group check if model has changed
actual_displayed_model <- my_widget ++: has_changed()
actual_displayed_model -> my_widget --: change_flag
end
alt change_flag != 0

group clear pixel buffer
my_widget -> my_widget ++: clear_pixel_buffer()
my_widget -> graphic_display_screen ++: clear_pixel_buffer(&pixel_frame)
return
deactivate my_widget
end
group widget drawing
rnote over my_widget : specific to the effective widget drawing
end

group draw border if any
alt widget_with_border == true
my_widget -> my_widget ++: rect(around the widget)
my_widget -> graphic_display_screen ++: pixel(x,y)
return
deactivate my_widget
end
end
group show widget to screen
my_widget-> my_widget ++ : show()
my_widget -> graphic_display_screen ++: show(pixel_frame, anchor_x, anchor_y)
return
deactivate my_widget
end

group ack draw done 
my_widget -> actual_displayed_model ++: ack_widget_drawn()
rnote over actual_displayed_model : change_flag -= 1
return
end
end
end
end
[<- my_widget: return
@enduml

@startuml draw
title method : draw
skinparam style strictuml
skinparam SequenceMessageAlignment center

[-> my_widget : draw()
    
loop for each widget
group get value of interest from model
my_widget->my_widget ++: get_value_of_interest()
actual_displayed_model <- my_widget ++: read values and process them
rnote over my_widget : specific to the implemented widget and the attached model
actual_displayed_model -> my_widget --: values
deactivate my_widget
end
group check if model has changed
actual_displayed_model <- my_widget ++: has_changed()
actual_displayed_model -> my_widget --: change_flag
end
alt change_flag != 0

group clear pixel buffer
my_widget -> my_widget ++: clear_pixel_buffer()
my_widget -> graphic_display_screen ++: clear_pixel_buffer(&pixel_frame)
return
deactivate my_widget
end
group widget drawing
rnote over my_widget : specific to the effective widget drawing
end

group draw border if any
alt widget_with_border == true
my_widget -> my_widget ++: rect(around the widget)
my_widget -> graphic_display_screen ++: pixel(x,y)
return
deactivate my_widget
end
end
group show widget to screen
my_widget-> my_widget ++ : show()
my_widget -> graphic_display_screen ++: show(pixel_frame, anchor_x, anchor_y)
return
deactivate my_widget
end

group ack draw done 
my_widget -> actual_displayed_model ++: ack_widget_drawn()
rnote over actual_displayed_model : change_flag -= 1
return
end
end
end
[<- my_widget: return
@enduml

