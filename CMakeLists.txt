# Generated Cmake Pico project file

cmake_minimum_required(VERSION 3.13)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Initialise pico_sdk from installed location
# (note this can come from environment, CMake cache etc)

# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
set(PICO_BOARD pico CACHE STRING "Board type")

# Pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)

project(CPP_DevKit C CXX ASM)

# Find Doxygen 
find_package(Doxygen) 
if(DOXYGEN_FOUND) # Set input and output files 
    set(DOXYGEN_CNF ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile_cnf) 
    add_custom_target(doc_doxygen 
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_CNF}        
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen" VERBATIM) 
endif()

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()

include_directories(${PROJECT_SOURCE_DIR}/src)

#-------------------------------------------------------------------------------------
add_subdirectory(src)
add_subdirectory(tests)
#-------------------------------------------------------------------------------------

# Add executable. Default name is the project name, version 0.1
# this is the sample exec file generated by Raspberry Pi Pico VSCode extension

add_executable(CPP_DevKit CPP_DevKit.cpp )

pico_set_program_name(CPP_DevKit "CPP_DevKit")
pico_set_program_version(CPP_DevKit "0.1")

# Modify the below lines to enable/disable output over UART/USB
pico_enable_stdio_uart(CPP_DevKit 1)
pico_enable_stdio_usb(CPP_DevKit 0)

# Add the standard library to the build
target_link_libraries(CPP_DevKit
        pico_stdlib)

# Add the standard include files to the build
target_include_directories(CPP_DevKit PRIVATE
  ${CMAKE_CURRENT_LIST_DIR}
)

# pico_add_extra_outputs(CPP_DevKit)

